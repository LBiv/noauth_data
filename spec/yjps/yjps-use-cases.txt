YJPS Use Cases
==============

YJPS is a persistence service. YJPS stores and retrieves encrypted data objects
(hereinater Objects) for its client (hereinafter Client).


Use Case Attributes
-------------------
  
Every YJPS Use Case has a title and a short reference id (hereinafter Id). A
Use Case may also be associated with YJPS HTTP server request route
(hereinafter Route).


Communication Model
-------------------

Client interacts with YJPS by sending HTTP requests and receiving HTTP
responses. The format of both request and response content is JSON.

Unless specified otherwise in the Use Case, a request is HTTP POST.

Unless specified otherwise in the Use Case, YJPS returns HTTP Status Code 200
on success.


Request Route Notation 
----------------------

Use Case description contains only the distinguishing part of a route.  For
example, if YJPS service root URL is http://some.example.com/yjps, then the
service URL for "store data" request is http://some.example.com/yjps/store and
the request route "store".


-----------------------------------------------------------------------------
Title: Client Stores an Object
Id: CSO
Route: store

CSO is a single request-response interaction:

- In request, Client provides
-- ephemeral public key
-- an array of one or more encrypted object decryption keys (hereinafter Key
    Slots), one for each of the intended recipients' keys.
-- encrypted object data
NOTE: from the perspective of YJPS and the protocol between YJPS and its
Client, the ephemeral public key, key slot and encrypted data are
opaque arrays of 8-bit bytes.

example of request JSON binding:
{
  "ephPubKey" : <base64-encoded-ephPubKey-as-JSON-String>,
  "keySlots" : [
    <base64-encoded-key-slot-1-as-JSON-string>,
    ...
    <base64-encoded-key-slot-2-as-JSON-string>,
    <base64-encoded-key-slot-n-as-JSON-string>
  ],
  "encObj" : <base64-encoded-encObj-as-JSON-String>
}

YJPS is supposed to try to store the encrypted object, the ephemeral public
key and key slots and respond with a response containing:

[on success]:
- a YJPS-generated id of stored object
- an array of YJPS-generated ids of key slots. The size of the array must be
  equal to that of the key slot array in the request
NOTE: a key slot is only unique in the scope of one stored object and hence
is not useful separately from the stored object id.
NOTE: stored object id and key slot id must be arrays of ASCII characters

example of response JSON binding:
{
  "objId" : <obj-id-as-JSON-string>,
  "keySlotIds" : [
    <keySlotId-1-as-JSON-string>,
    ...
    <keySlotId1-2-as-JSON-string>,
    <keySlotId1-n-as-JSON-string>
  ]
}

[on failure]:
- the error status code, an integer
- optional explanatory error message, an array of ASCII characters.


-----------------------------------------------------------------------------
Title: Client Retrieves an Object
Id: CRO

CRO is single request-response interaction:

- In request, Client specifies
-- an id of the object it wants to retrieve, earlier generated by YJPS as
  explained for CSO use case
-- a key slot id earlier generated by YJPS as explained for CRO use case

- in Response, YJPS returns
[on success]:
-- ephemeral public key
-- key slot id
-- encrypted message

example of response JSON binding:
{
  "ephPubKey" : <base64-encoded-ephPubKey-as-JSON-String>,
  "keySlot" : <base64-encoded-key-slot-n-as-JSON-string>
  "encMsg" : <base64-encoded-encMsg-as-JSON-String>,
}

[on failure]:
- the error status code, 404
- optional explanatory error message, an array of ASCII characters.

