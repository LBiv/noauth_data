YJPS Use Cases
==============

YJPS is a transactional persistence service of JSON objects. YJPS stores and
retrieves encrypted data objects (hereinater Objects) for its client
(hereinafter Client).


Use Case Attributes
-------------------
  
Every YJPS Use Case has a title and a short reference id (hereinafter Id). A
Use Case may also be associated with YJPS HTTP server request route
(hereinafter Route).


Communication Model
-------------------

Client interacts with YJPS by sending HTTP requests and receiving HTTP
responses. The format of both request and response content is JSON.

Unless specified otherwise in the Use Case, a request is HTTP POST.

Unless specified otherwise in the Use Case, YJPS returns HTTP Status Code 200
on success.


Request Route Notation 
----------------------

Use Case description contains only the distinguishing part of a route.  For
example, if YJPS service root URL is http://some.example.com/yjps, then the
service URL for "store data" request is http://some.example.com/yjps/store and
the request route is "store".


Use Cases
---------

-----------------------------------------------------------------------------
Title: Start New Transaction
Id: SNT
FIXME TBC

-----------------------------------------------------------------------------
Title: Roll Back Transaction 
Id: RBT
FIXME TBC

-----------------------------------------------------------------------------
Title: Commit Transaction
Id: CT
FIXME TBC

-----------------------------------------------------------------------------
Title: Client Stores an Object
Id: CSO
Route: store

CSO is a single request-response interaction:

- In request, Client provides
-- optional ephemeral public key
-- optional transaction id
-- an optional array of one or more encrypted object decryption keys
  (hereinafter Key Slots), one for each of the intended recipients' keys. The
  array must be present if ephemeral public key presents; otherwise it must 
  be absent
-- optionally encrypted object data. the object data are encrypted if optional
  ephemeral public key is present.
NOTE: from the perspective of YJPS and the protocol between YJPS and its
Client, the ephemeral public key, key slot and encrypted data are
opaque arrays of 8-bit bytes.

example of request JSON binding:
{
  "ephPubKey" : <base64-encoded-ephPubKey-as-JSON-String>,
  "transId" : <optional-base64-encoded-transaction-id-as-JSON-String>,
  "keySlots" : [
    <base64-encoded-key-slot-1-as-JSON-string>,
    ...
    <base64-encoded-key-slot-2-as-JSON-string>,
    <base64-encoded-key-slot-n-as-JSON-string>
  ],
  "encObj" : <base64-encoded-encObj-as-JSON-String>
}

YJPS is supposed to try to store the encrypted object, the ephemeral public
key and key slots and respond with a response containing:

[on success]:
- a YJPS-generated id of stored object
- an array of YJPS-generated ids of key slots (if present in the request). The
  size of the array must be equal to that of the key slot array in the request
NOTE: a key slot is only unique in the scope of one stored object and hence
is not useful separately from the stored object id.
NOTE: stored object id and key slot id must be arrays of ASCII characters

example of response JSON binding:
{
  "objId" : <obj-id-as-JSON-string>,
  "keySlotIds" : [
    <keySlotId-1-as-JSON-string>,
    ...
    <keySlotId1-2-as-JSON-string>,
    <keySlotId1-n-as-JSON-string>
  ]
}

[on failure]:
- the error status code, an integer
- optional explanatory error message, an array of ASCII characters
FIXME TODO: errors must include "too big message", "too big transaction",
  "unknown transaction id"

-----------------------------------------------------------------------------
Title: Client Retrieves an Object
Id: CRO

CRO is single request-response interaction:

- In request, Client specifies
-- an id of the object it wants to retrieve, earlier generated by YJPS as
  explained for CSO use case
-- conditionally, transaction id. Transaction id must be present if Client
  believes the object was created as a part of yet uncommitted transaction;
  else, it must be absent.
-- conditionally, one key slot id earlier generated by YJPS as explained for
CSO use case. NOTE: the key slot id must be present if the client wants to
retrieve encrypted object; otherwise, it must be absent.

- in Response, YJPS returns
[on success]:
-- conditionally, ephemeral public key. Ephemeral public key is returned if the
  request contained key slot id 
-- conditionally, key slot. Key slot is returned iff ephemeral public key is
  returned

example of response JSON binding:
{
  "ephPubKey" : <optional-base64-encoded-ephPubKey-as-JSON-String>,
  "keySlot" : <optional-base64-encoded-key-slot-n-as-JSON-string>
  "encObj" : <base64-encoded-encObj-as-JSON-String>,
}

[on failure]:
- the error status code, 404
- optional explanatory error message, an array of ASCII characters.
FIXME TODO: errors must include "unknown transaction id",
    "required key slot id unspecified", "forbidden key slot id specified"


-----------------------------------------------------------------------------
Title: Delete Object
Id: DO
