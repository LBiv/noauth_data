YJPS Use Cases
==============

YJPS Client (hereinafter Client) is a software using YJPS services.

Client interacts with YJPS by exchanging service-level messages that are
generally in JSON format. To avoid confustion between service-level messages and
Client messages (that can be carried by service-level messages as a payload)
hereinafter we refer to service-level messages only by their specific type
such as "Request" or "Response" and to Client messages simply as "messages".

-----------------------------------------------------------------------------
Title: Client Uploads a Message
Id: CUM

CUM is a single request-response interaction:

- In request, Client provides
-- ephemeral public key
-- an array of one or more encrypted message decryption keys (hereinafter Key
    Slots), one for each of the intended recipients' keys.
-- encrypted message to store
NOTE: from the perspective of YJPS and the protocol between YJPS and its
Client, an ephemeral public key, a key slot and an encrypted message are
opaque arrays of 8-bit bytes (hereinafter octets).

example of request JSON binding:
{
  "ephPubKey" : <base64-encoded-ephPubKey-as-JSON-String>,
  "keySlots" : [
    <base64-encoded-key-slot-1-as-JSON-string>,
    ...
    <base64-encoded-key-slot-2-as-JSON-string>,
    <base64-encoded-key-slot-n-as-JSON-string>
  ],
  "encMsg" : <base64-encoded-encMsg-as-JSON-String>
}

YJPS is supposed to try to store the encrypted message, the ephemeral public
key and key slots and respond with a response containing:

[on success]:
- a YJPS-generated id of stored message
- an array of YJPS-generated ids of key slots. The size of the array must be
  equal to that of the key slot array in the request
NOTE: a key slot is only unique in the scope of one store message and hence
is not useful separately from the stored message id.
NOTE: stored message id and key slot id must be arrays of ASCII characters

example of response JSON binding:
{
  "msgId" : <msg-id-as-JSON-string>,
  "keySlotIds" : [
    <keySlotId-1-as-JSON-string>,
    ...
    <keySlotId1-2-as-JSON-string>,
    <keySlotId1-n-as-JSON-string>
  ]
}

[on failure]:
- the error status code, an integer
- optional explanatory error message, an array of ASCII characters.


-----------------------------------------------------------------------------
Title: Client Retrieves a Message
Id: CRM

CRM is single request-response interaction:

- In request, Client specifies
-- an id of message it wants to retrieve, earlier generated by YJPS as
  explained for CUM use case
-- a key slot id earlier generated by YJPS as explained for CUM use case

- in Response, YJPS returns
-- ephemeral public key
-- key slot id
-- encrypted message

example of response JSON binding:
{
  "ephPubKey" : <base64-encoded-ephPubKey-as-JSON-String>,
  "keySlot" : <base64-encoded-key-slot-n-as-JSON-string>
  "encMsg" : <base64-encoded-encMsg-as-JSON-String>,
}

